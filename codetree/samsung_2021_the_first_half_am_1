'''
n * n 학생
놀이기구 모든 칸이 비어져있음 (r,c)

각 학생별로 좋아하는 학생이 4명씩 정해져있음

입력으로 주오진 순서대로 가장 우선순위가 높은 칸에 탑승하려고함. 대신 비어있는 칸으로

1. 4방향으로 인접한 칸 중 앉아있는 좋아하는 친구의 수가 갖아 많은 위치로

2. 1번 조건을 만족하는 칸의 위치가 여러 곳이라면, 인접한 칸 중 비어잇는 칸의 수가 가장 많은 곳으로

3. 2번 조건까지 동일하면, 그 중 행 번호가 가장 작은 위치로

4. 3번까지 동일하면, 그 중 열 번호가 가장 작은 위치로


모두 위치가 정해졌으면, 각 학생마다 점수를 합쳐서 최종 점수를 출력해라

'''
import sys
from collections import OrderedDict
def find_location(node:int) -> None:
    c, f, e = [0,0],-1,-1 # 후보지, 근처 친구 수, 빈자리
    for i in range(N):
        for j in range(N):
            if not matrix[i][j]:
                t_f, t_e = 0,0
                for k in range(4):
                    x,y = i + dx[k], j + dy[k]
                    if 0<= x< N and 0<= y< N:
                        if not matrix[x][y]:
                            t_e += 1
                        elif matrix[x][y] in dic[node]:
                            t_f += 1
                if f < t_f :
                    c,f = [i,j], t_f
                    e = t_e
                elif t_f == f:
                    if e < t_e:
                        c,e = [i,j], t_e
                # 어짜피 row, col 순서로 해서 3,4 번 조건은 신경 쓸 필요 없음
    matrix[c[0]][c[1]] = node
def rate():
    r, ans = [0,1,10,100,1000],0
    for i in range(N):
        for j in range(N):
            f = 0
            for k in range(4):
                x,y = dx[k] + i, dy[k] + j
                if 0<=x <N and 0<= y < N and matrix[x][y] in dic[matrix[i][j]]:
                    f += 1
            ans += r[f]
    return ans


input = sys.stdin.readline
N = int(input())
matrix, dic = [[0] *N for _ in range(N)], OrderedDict()
dx,dy = [1,0,-1,0], [0,1,0,-1]
for _ in range(N*N):
    f = list(map(int,input().split()))
    dic[f[0]] = set(f[1:])
for node in dic:
    find_location(node)
print(rate())

